<?xml version="1.0" encoding="UTF-8"?>
<Module>
<ModulePrefs title="Mathematics Search"
height="25"
description=
"
The search is small but powerful. 
Easy to use in Gmail and phones. 
Press TAB to see commands. 
It offers courses, answers, integer sequences, calculator, solver, definitions, history, timeline and more coming regularly. 
Press TAB to see commands, they work like'seq: 1,1,2,3,5' and 'so: group theory' where you can ask questions. 
For the small, try 'Y (search)' -gadget.
Provided by Math Harbour, MathHarbour.com.
"
author ="MathHarbour.com"
author_email ="mathharbour1@gmail.com"
author_aboutme ="Harbour -project specializes in search."
author_email ="mathharbour1@gmail.com" 
screenshot="" 
title_url="http://www.mathharbour.com/"
thumbnail=""
category="technology" category2="communication"
scrolling="false">
</ModulePrefs>
<Content type="html">
<![CDATA[
<html>

<head>

<style type="text/css">

#search {
float:left;
height:100%;
width:100%;
}

#topic_box {
float:left;
}

h3{
color:#000000
}

</style>

</head>



<body>


<script>
// Track this gadget using Google Analytics.
// Creates a tracking object and uses reportPageview method to call gadget view
var ga = new _IG_GA("UA-9530592-7"); 
ga.reportPageview('/view/specific/MathGadget');
</script>



<p style="display:none">
<textarea rows=10 id="data">alpha: 
course: 
define: 
eg: 
history: 
latex: 
prove: 
puzzle: 
research: 
seq: 
so: 
timeline: 
unsolved: 
</textarea>
</p>





<form onsubmit="return handleSubmit()" method="get" name="moduleForm" id="moduleForm">
<div id="typingPad">
<input type="text" name="allQuery" id="allQuery" size="15" />
</div>
<div id="help" style="display: none">

Press TAB to see commands.

</div>


<script>

  // takes a text field and an array of strings for autocompletion
  function autocomplete(input, data) 
	{

    if (input.value.length == input.selectionStart && input.value.length == input.selectionEnd) 
		{
      var candidates = []
			
      // filter data to find only strings that start with existing value
			// then, check TAB-TAB: return next choice mod(len-1) if exact match
      for (var i=0; i < data.length; i++) 
			{
        if (data[i].indexOf(input.value) == 0 && data[i].length > input.value.length)
				{
          candidates.push(data[i])
				} 
				else if (data[i].indexOf(input.value) == 0)
				{
				  input.value = data[(i+1)%(data.length)];
					return true;
				}
      }
      
      if (candidates.length > 0) 
			{
        // some candidates for autocompletion are found
        if (candidates.length == 1) input.value = candidates[0]
        else input.value = longestInCommon(candidates, input.value.length)
        return true
      }
    }
    return false
  }
  
  // finds the longest common substring in the given data set.
  // takes an array of strings and a starting index
  function longestInCommon(candidates, index) 
	{
    var i, ch, memo
    do {
      memo = null
      for (i=0; i < candidates.length; i++) {
        ch = candidates[i].charAt(index)
        if (!ch) break
        if (!memo) memo = ch
        else if (ch != memo) break
      }
    } while (i == candidates.length && ++index)
    
    return candidates[0].slice(0, index)
  }
  
  function getData(id)
	{
		return document.getElementById(id).value.split("\n");
  }
  
  var input = document.getElementById('allQuery')
  
  // catch TAB keypresses in text input
  input.addEventListener('keydown', function(e) 
	{
		// data determined by the topic in the Select value
		var data = getData(document.getElementById("searchTopic").value);

    if (e.keyCode == 9 && autocomplete(this, data)) e.preventDefault()
  }, false)




	// TODO: something wrong here despite copied from harbour.xml, odd
	// Shell-style keybindings
	// Clear with ^C
	var isCTRL = false;
	document.onkeyup = function(e)
	{
		if (e.which == 17) isCTRL=false;
  }

	document.onkeydown = function(e)
	{
		if (e.which == 17) isCTRL=true;
		if (e.which == 67 && isCTRL) clear();
	}






  input.focus()
</script>

<script type="text/javascript">
function _toggle(el) 
{
	el = document.getElementById(el);
	if (el !== null) {
		if (el.style.display.length === 0 || el.style.display === "block") {
			el.style.display = "none";
		} else if (el.style.display === "none") {
			el.style.display = "block";
		}
	}
}



function continueExecution()
{
	//finish doing things after the pause
	_toggle('help');
	_toggle('typingPad');
	document.moduleForm.allQuery.value='';
}
</script>

</form>












<script type="text/javascript">

function handleSubmit()
{
	var form = _gel("moduleForm"),
	    elm = _gel("allQuery");
    // Not in door gadgets
    var selectElm = _gel("allSelect");

	if (elm != "" && selectElm != "")
	{
		var query = _trim(elm.value);
		var checkCommand = _trim(query.split(":")[0].toLowerCase());

		var searchUrl = "http://www.wolframalpha.com/input/?i=";

	var urls = ['alpha|http://www.wolframalpha.com/input/?i=',
	    'course|http://www.ocwconsortium.org/index.php?q=mathematics&option=com_coursefinder&uss=1&l=&s=&Itemid=166&b.x=35&b.y=9&b=search&q=',
	    'define|https://sites.google.com/site/mathharbourclassroom/system/app/pages/customSearch?scope=cse-goog_640195594&q=', 
	    'eg|http://www.exampleproblems.com/wiki/index.php/Special:Search?search=',
	    'history|https://sites.google.com/site/mathharbourpast/system/app/pages/customSearch?scope=cse-goog_835377240&q=',
	    'latex|https://sites.google.com/site/mathharbourresearch/system/app/pages/customSearch?scope=cse-goog_696098646&q=',
	    'prove|http://www.proofwiki.org/w/index.php?title=Special%3ASearch&go=Go&search=',
	    'puzzle|https://sites.google.com/site/mathharbourclassroom/system/app/pages/customSearch?scope=cse-goog_1087142469&q=',
	    'research|http://mathoverflow.net/search?q=',
	    'seq|http://oeis.org/search?q=',
	    'so|http://math.stackexchange.com/search?q=',
	    'timeline|https://sites.google.com/site/mathharbourpast/system/app/pages/customSearch?scope=cse-goog_835377241&q=',
	    'unsolved|https://sites.google.com/site/mathharbourresearch/system/app/pages/customSearch?scope=cse-goog_696098647&q='
		    ];


		if(checkCommand == "help") 
		{
			_toggle('typingPad');
			_toggle('help');
			query="";
			setTimeout(continueExecution, 3000)
		}


        for ( var i=0;i<urls.length; i++)
        {
            if (checkCommand == urls[i].split("|")[0])
            {
                searchUrl = urls[i].split("|")[1];
                var re = new RegExp("^"+urls[i].split("|")[0], "gi");
                query = _trim(query.replace(re, "").split(":").join(""));
                i=10801;
            }
        }





        if (query != "" && searchUrl != "") 
        {
            searchUrl += escape(query);
            window.open(searchUrl, form.target || "_top");
        }
    }

    return false;
}


// Tracks button click as an event
ga.reportEvent("Math Specific", "Search", "Button");

</script>

</body>
</html>

]]>
</Content></Module>
